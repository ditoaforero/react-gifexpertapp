{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAIrC,OAFAC,QAAQC,IAAIJ,EAAIC,EAAOC,GAGnB,sBAAKG,UAAU,yCAAf,UACI,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,4BAAIA,Q,uBCTHO,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbR,EADa,iDACkCS,UAAUF,GAD5C,+DAEAG,MAAMV,GAFN,cAEbW,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QATvB,kBAaZc,GAbY,4CAAH,sDCOPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAKrB,ECTwB,SAAEA,GAC1B,MAA0BvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAZAC,qBAAW,WACPjB,EAAUC,GACLiB,MAAM,SAAAC,GACHxB,QAAQC,IAAIuB,GACZH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAGGc,EDXwBK,CAAanB,GAAhCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAGpB,OACI,qCACI,oBAAIjB,UAAU,yCAAd,SAAwDI,IAEvDa,GAAW,mBAAGjB,UAAU,wCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIlB,aEiBtB6B,EArCM,WAIjB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KASA,OACI,qCACI,8CAIA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQS,EAAWuB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCvBjCqB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fb347cfb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault(); // Esto sirve para que no tenga que refrescar toda la pagina.\n        \n        if ( inputValue.trim().length > 2 ){\n            setCategories( categories => [inputValue, ...categories ]);\n            setInputValue('');\n        }\n    }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange}\n            />\n        </form>\n    )\n};\n\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    \n    console.log(id, title, url)\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs = async(category) => {\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=a5uIdYvU9FJzS16Hotwa7pgy96VozTto`;    \n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","//import React, { useState, useEffect } from 'react';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\n\n\nexport const GifGrid = ({category}) => {\n\n\n    //const [images, setImages] = useState([]);\n\n    const {data:images, loading} = useFetchGifs(category);\n    \n\n    return (\n        <>\n            <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\n            \n            {loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Para parametrizar que funciones se deben ejecutar solo una vez por render del componente.\n    // Si se llega a cambiar category se vuelve a ejecutar getGifs\n    useEffect( () => {\n        getGifs ( category)\n            .then( imgs => {\n                console.log(imgs);\n                setState({\n                    data: imgs,\n                    loading: false  \n                });\n            });\n    }, [category])\n    \n\n    return state;\n}\n\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    \n    \n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, 'Hunter X Hunter']);\n    // }\n\n    \n    \n\n    return (\n        <>\n            <h2>\n                GifExpertApp\n            </h2>\n            \n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            \n            <ol>\n               { \n                    categories.map(category => (\n                        <GifGrid \n                            key={category} \n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n            \n        </>\n    )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}